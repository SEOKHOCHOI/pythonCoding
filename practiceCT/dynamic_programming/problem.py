# 개미 전사

'''
- 개미 전사는 부족한 식량을 충당하고자 메뚜기 마을의 식량창고를 몰래 공력하려고 합니다.
  메뚜기 마을에는 여러 개의 식량창고가 있는데 식량창고는 일직선으로 이어져 있습니다.
- 각 식량창고에는 정해진 수의 식량을 저장하고 있으며 개미 전사는 식량창고를 선택적으로 약타랗여
  식량을 빼앗을 예정입니다. 이때 메뚜기 정찰병들은 일직선상에 존재하는 식량창고 중에서 
  서로 인접한 식량창고가 공격받으면 바로 알아챌 수 있습니다.
- 따라서 개미 전사가 정찰병에게 들키기 않고 식량창고를 약탈하기 위해서는
  최소한 한 칸 이상 떨어진 식량창고를 약탈해야 합니다.
- 예를 들어 식량창고 4개가 {1, 3, 1, 5}로 존재한다고 가정합시다.
- 이때 개미 전사는 두 번째 식량창고와 네 번째 식량창고를 선택했을 때 최댓값인 총 8개의 식량을 빼앗을 수 있습니다.
  개미 전사는 식량창고가 이렇게 일직선상일 때 최대한 많은 식량을 얻기를 원합니다.
- 개미 전사를 위해 식량창고 N개에 대한 정보가 주어졌을 때 얻을 수 있는 식량의 최댓값을 구하는 프로그램을 작성하시오.
'''
'''
문제 해결 아이디어
- N = 4일 때, 다음과 같은 경우들이 존재할 수 있습니다.
    식량을 선택할 수 있는 경우의 수는 8가지입니다.
    1 3! 1 5! 경우가 8만큼의 식량을 얻을 수 있으므로 최적의 해는 8입니다.

- ai = i번째 식량창고까지의 최적의 해 (얻을 수 있는 식량의 최댓값)
    이렇게 정의한다면 다이나믹 프로그래밍을 적용할 수 있습니다.
    DP 테이블 값: a0 = 1, a1 = 3,  a2 = 3, a3 = 8
- 왼쪽부터 차례대로 식량창고를 턴다고 했을 때, 특정한 i번째 식량창고에 대해서 털지 안 털지의
  여부를 결정하면, i-1,i-2 2가지의 경우 중에서 더 많은 식량을 털 수 있는 경우를 선택하면 됩니다.

- ai = i번째 식량창고까지의 최적의 해 (얻을 수 있는 식량의 최댓값)
- ki = i번째 식량창고에 있는 식량의 양
- 점화식
    ai = max(ai-1, ai-2 + ki)
- 한 칸 이상 떨어진 식량창고는 항상 털 수 있으므로 (i-3)번째 이하는 고려할 필요가 없습니다.
'''
# 답안

# 정수 N을 입력 받기
n = int(input())
# 모든 식량 정보 입력 받기
array = list(map(int, input().split()))

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# 다이나믹  프로그래밍(Dynamic Programming) 진행 (보텀업)
d[0] = array[0]
d[1] = max(array[0], array[1])
for i in range(2, n):
    d[i] = max(d[i-1], d[i-2] + array[i])

# 계산된 결과 출력
print(d[n - 1])
