# 계수 정렬
'''
특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠르게 동작하는 정렬 알고리즘.
  계수 정렬은 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용.
데이터의 개수가 N, 데이터(양수) 중 최댓값이 K일 때 최악의 경우에도 수행 시간 O(N + K)를 보장.
'''

'''
동작 예시

가장 작은 데이터부터 가장 큰 데이터까지의 범위가 모두 담길 수 있도록 리스트를 생성.
정렬할 데이터ㅣ 7 5 9 0 3 1 6 2 9 1 4 8 0 5 2 ( 총 15개 가장 작은수 0 큰수는 9)
가장 작은 데이터부터 가장 큰 데이터까지의 범위가 모두 담길수 있는 범위로 리스트를 초기화!
이 상황엔 인덱스가 0부터 9까지 차례대로 구성되고, 이때 각 인덱스가 데이터에 값에 해당함.
각각의 데이터가 총 몇번씩 등장했는지 그 갯수를 세는것.

인덱스 0 1 2 3 4 5 6 7 8 9
카운드 2 2 2 1 1 2 1 1 1 2번 등장 

결과를 확인할 때는 리스트의 첫 번째 데이터부터 하나씩 그 값만큼 반복하여 인덱스를 출력.
0 0 1 1 2 2 3 4 5 5 6 7 8 9 9  가 출력돼.

가장 작, 가장 큰 모든 범위 포함하는 배열을 만들어야 하기에
상대적으로 공간 복잡도는 높지만 빠름.
'''

# 모든 원소의 값이 0 보다 크거나 같다고 가정
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]

# 모든 범위를 포함하는 리스트 선언(모든 값은 0 으로 초기화)
count = [0] * (max(array) + 1)

for i in range(len(array)):
    count[array[i]] += 1  # 각 데이터에 해당하는 인덱스의 값 증가

for i in range(len(count)):  # 리스트에 기록된 정렬 정보 확인
    for j in range(count[i]):
        print(i, end=' ')  # 띄어쓰기를 구분으로 등장한 횟수만큼 인덱스 출력


'''
계수 정렬의 복잡도 분석

계수 정렬의 시간 복잡도와 공간 복잡도는 모두 O(N + K)이다.
계수 정렬은 때에 따라서 심각한 비효율성을 초래할 수 있는데
  데이터가 0과 999,999로 단 2개만 존재하는것 같은 경우이다.
  데이터는 2개뿐이지만 우리는 총 100만개 만큼의 원소가 담길 수 있는
  배열을 만들어야 한다.. 데이터의 범위가 너무 크다면 이러한 계수정렬은
  사용하기 힘들다.
  
계소 정렬은 동일한 값을 가지는 데이터가 여러 개 등장할 때 효과적으로 사용할 수 있다.
  성적의 경우 100점을 맞은 학생이 여러 명일 수 있기 때문에 계수 정렬이 효과적이다.
'''
