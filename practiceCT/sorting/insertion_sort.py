# 처리되지 않은 데이터를 하나씩 골라 적절한 위치에 삽입한다.
# 선택 정렬에 비해 구현 난이도가 높은 편이지만, 일반적으로 더 효율적으로 동작한다.


'''
일단 기본적으로 오름차순 정렬이라 가정하고 생각하자.
Step 0
첫 번째 데이터 '7'은 그 자체로 정렬이 되어 있다고 판단하고,
두 번째 데이터인 '5'가 어떤위치로 들어갈지 판단.
'7'의 왼쪽으로 들어가거나 오른쪽으로 들어가거나 두 경우만 존재.
7 5 9 0 3 1 6 2 4 8

Step 1
이어서 '9'가 어떤 위치로 들어갈지 판단한다.
차례대로 왼쪽에 데이터와 비교해서 더 작다면 위치를 바꿔주고
크다면 오른쪽에 위치한다.(그자리에 머문다.)
5 7 9 0 ... 에서
(자리1) 5 (자리2) 7 (자리3) 9 .. 중
자리1, 자리2, 자리3 중 들어갈 위치 한 곳을 고르면 됐던것.

나머지도 이를 반복한다.
0 도 매번 위치를 바꿔가며 9의 앞, 7의 앞, 5의 앞 이런식으로
위치를 바꿔가며 이동하는것. ( 한번에 교환이 아냐 )
'''

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)):
    for j in range(i, 0, -1):  # 인덱스 i부터 1까지 1씩 감소하며 반복하는 문법
        if array[j] < array[j - 1]:  # 한 칸씩 왼쪽으로 이동
            array[j], array[j - 1] = array[j - 1], array[j]
        else:  # 자기보다 작은 데이터를 만나면 그 위치에서 멈춤
            break

print(array)

# 삽입 정렬의 시간 복잡도
'''
삽입 정렬의 시간 복잡도는 O(N^2)이며, 선택 정렬과 마찬가지로 반복문이 두 번 중첩되어 사용됨.
삽입 정렬은 현재 리스트의 데이터가 거의 정렬되어 있는 상태라면 매우 빠르게 동작.
  이미 정렬되어 있는 상태에서 다시 정렬을 수행하면? ( 오름차순 수행일때 )
  최선의 경우 O(N)의 시간 복잡도를 가짐.
  0 1 2 3 4 5 6 7 8 9
'''
